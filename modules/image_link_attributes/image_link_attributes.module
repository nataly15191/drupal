<?php

/**
 * @file
 * Contains image_link_attributes.module.
 */

use Drupal\Core\Url;
use Drupal\Core\Render\Element;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Unicode;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_help().
 */
function image_link_attributes_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the image_link_attributes module.
    case 'help.page.image_link_attributes':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Extends the default image field link formatter to add attributes for class=xxx, target=xxx, and rel=xxx.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 *
 * @param $summary
 * @param $context
 */
function image_link_attributes_field_formatter_settings_summary_alter(&$summary, $context) {
  $available_attributes = \Drupal::config('image_link_attributes.config')->get('attributes') ?: [];
  $settings = $context['formatter']->getThirdPartySettings('image_link_attributes');
  $image_settings = $context['formatter']->getSettings();
  if(array_key_exists('image_link' , $image_settings)){
    $image_link = $image_settings['image_link'];
  }

  // Break when no linked field settings were found.
  if (!$settings) {
    return;
  }

  // Normalize the settings.
  $extended = $settings['extended'];

  $summary_items = [];

  // Insert Target into the summary_items array
  if(!empty($settings['advanced']['target'])){
    $summary_items[] = t('@label: <code>@attribute</code>', [
      '@label' => 'Target',
      '@attribute' => $settings['advanced']['target'],
    ]);
  }

  foreach ($available_attributes as $attribute => $info) {
    if (empty($settings['advanced'][$attribute]) || empty($image_link)) {
      continue;
    }

    // Provide default label / description for attributes.
    if (!$info['label']) {
      $info['label'] = str_replace('-', ' ', Unicode::ucfirst($attribute));
    }

    $summary_items[] = t('@label: <code>@attribute</code>', [
      '@label' => $info['label'],
      '@attribute' => $settings['advanced'][$attribute],
    ]);
  }

  if ($extended) {
    $list = [
      '#theme' => 'item_list',
      '#items' => $summary_items,
      '#title' => 'Link Attributes',
    ];

    $summary[] = $list;
  }
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 *
 * @param \Drupal\Core\Field\FormatterInterface $plugin
 * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
 * @param $view_mode
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function image_link_attributes_field_formatter_third_party_settings_form($plugin, $field_definition, $view_mode, $form, $form_state) {

  if ($plugin->getPluginId() == 'image') {

    $target_options = \Drupal::config('image_link_attributes.config')->get('targets') ?: [];
    $available_attributes = \Drupal::config('image_link_attributes.config')->get('attributes') ?: [];
    $settings = $plugin->getThirdPartySettings('image_link_attributes');

    if(!array_key_exists( 'extended' , $settings )) {
      $settings['extended'] = 0;
    }

    $element['extended'] = [
      '#title' => t('Add custom attribute(s) to the link?'),
      '#type' => 'checkbox',
      '#default_value' => $settings['extended'],
      '#states' => [
        'invisible' => [
          'select[name$="[settings][image_link]"]' => ['value' => ''],
        ],
      ],
    ];

    $element['advanced'] = [
      '#title' => t('Advanced'),
      '#type' => 'details',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#states' => [
        'invisible' => [
          ['select[name$="[settings][image_link]"]' => ['value' => ''],],
          ['input[name$="[third_party_settings][image_link_attributes][extended]"]' => ['unchecked' => TRUE],],
        ],
      ],
    ];

    $element['advanced']['target'] = [
      '#type' => 'select',
      '#title' => 'Target',
      '#description' => t('Select the value for the <code>@attribute</code> attribute.', ['@attribute' => 'target']),
      '#default_value' => isset($settings['advanced']['target']) ? $settings['advanced']['target'] : '',
    ];

    $element['advanced']['target']['#options'][''] = t('none');
    foreach ($target_options as $target => $option) {
      $element['advanced']['target']['#options'][$target] = $option['label'];
    }

    foreach ($available_attributes as $attribute => $info) {
      // Provide default label / description for attributes.
      if (!$info['label']) {
        $info['label'] = str_replace('-', ' ', Unicode::ucfirst($attribute));
      }
      if (!$info['description']) {
        $info['description'] = t('Enter value for <code>@attribute</code> attribute.', ['@attribute' => $attribute]);
      }

      $element['advanced'][$attribute] = [
        '#type' => 'textfield',
        '#title' => $info['label'],
        '#description' => $info['description'],
        '#default_value' => isset($settings['advanced'][$attribute]) ? $settings['advanced'][$attribute] : '',
      ];
    }
    return $element;
  }
}

/**
 * Implements hook_preprocess_HOOK()
 * This allows us to pass attributes to the image_formatter template.
 */
function image_link_attributes_preprocess_image_formatter(&$variables) {

  // Acquire the node $entity
  $nid = \Drupal::routeMatch()->getRawParameter('node');
  if (empty($nid)) {
    return;
  }
  $entity = \Drupal\node\Entity\Node::load($nid);

  // Assume full view_mode
  $view_mode = "full";

  // Find the $field_name in the $variables object
  $field_name = $variables['item']->getFieldDefinition()->getName();

  /**
   * Get 'third_party_settings' field settings
   * and push to the template $variables['attributes']
   */
  $entity_display = EntityViewDisplay::collectRenderDisplay($entity, $view_mode);
  $field_display = $entity_display->getComponent($field_name);

  $field_link_attributes = $field_display['third_party_settings']['image_link_attributes']['extended'];

  if($field_link_attributes){
    $variables['attributes']['data-field-attributes'] = $field_link_attributes;
    // Loop through $available_attributes to make them available to the field template.
    $available_attributes = $field_display['third_party_settings']['image_link_attributes']['advanced'];
    foreach ($available_attributes as $attribute => $info) {
      $variables['attributes'][$attribute] = $info;
    }
  }
}


/**
 * Implements hook_theme_registry_alter
 */
function image_link_attributes_theme_registry_alter(&$theme_registry) {
  $theme_registry['image_formatter']['path'] = drupal_get_path('module', 'image_link_attributes') . '/templates/field';
}


/**
 * Implements hook_theme().
 */
function image_link_attributes_theme($existing, $type, $theme, $path) {
  return array(
    'image_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'item_attributes' => NULL,
        'url' => NULL,
        'image_style' => NULL,
      ),
    ),
  );
}
