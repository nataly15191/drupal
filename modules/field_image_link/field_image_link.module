<?php

use Drupal\Component\Utility\Unicode;

/**
 * Implements hook_theme().
 */
function field_image_link_theme() {
  return [
    'image_link_formatter' => [
      'variables' => [
        'item' => NULL,
        'item_attributes' => NULL,
        'image' => NULL,
        'link' => NULL,
        'settings' => NULL,
      ],
    ],
  ];
}

/**
 * Prepares variables for image_link formatter templates.
 *
 * Default template: image-link-formatter.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - item: An ImageItem object.
 *   - item_attributes: An optional associative array of html attributes to be
 *     placed in the img tag.
 *   - image_style: An optional image style.
 *   - url: An optional \Drupal\Core\Url object.
 */
function template_preprocess_image_link_formatter(&$variables) {
  if ($variables['image']['#image_style']) {
    $variables['image']['#theme'] = 'image_style';
    $variables['image']['#style_name'] = $variables['image']['#image_style'];
  }
  else {
    $variables['image']['#theme'] = 'image';
  }
  $variables['image']['#attributes'] = $variables['item_attributes'];

  $item = $variables['item'];

  // Do not output an empty 'title' attribute.
  if (Unicode::strlen($item->title) != 0) {
    $variables['image']['#title'] = $item->title;
  }

  if (($entity = $item->entity) && empty($item->uri)) {
    $variables['image']['#uri'] = $entity->getFileUri();
  }
  else {
    $variables['image']['#uri'] = $item->uri;
  }

  foreach (['width', 'height', 'alt'] as $key) {
    $variables['image']["#$key"] = $item->$key;
  }

  if (!empty($variables['image']['#url'])) {
    $variables['image'] = array(
      '#type' => 'link',
      '#title' => $variables['image'],
      '#url' => $variables['image']['#url'],
      '#options' => array('html' => TRUE),
    );
  }

}

/**
 * Provides image file dimensions.
 *
 * @param \Drupal\file\Entity\File $file
 *   SVG file.
 *
 * @return array
 *   Dimensions array.
 */
function field_image_link_get_image_file_dimensions(\Drupal\file\Entity\File $file) {
  $image = \Drupal::getContainer()->get('image.factory')->get($file->getFileUri());

  $variables = [];

  if ($image->isValid()) {
    $variables['width'] = $image->getWidth();
    $variables['height'] = $image->getHeight();
  }
  else {
    // Set default width and height values.
    $variables['width'] = $variables['height'] = 64;
    // We can find out only dimensions of the SVG files.
    if (field_image_link_is_file_svg($file)) {
      // Parse SVG as XML.
      $fileContents = file_get_contents($file->getFileUri());
      // In some cases file could be not available for the loading. It could be
      // deleted from the files folder physically, moved to other place or
      // permissions will not allow to read it. In this case we will just skip
      // dimensions discovering.
      if ($fileContents) {
        $svg = simplexml_load_string($fileContents);
        $neededVariables = ['width', 'height'];

        if ($svg) {
          foreach ($svg->attributes() as $attribute => $value) {
            if (in_array($attribute, $neededVariables)) {
              $variables[$attribute] = (integer) $value;
            }
          }
        }
      }
    }
  }

  return $variables;
}

/**
 * Checks if current file is SVG image.
 *
 * @param \Drupal\file\Entity\File $file
 *   File to check.
 *
 * @return bool
 *   TRUE if is SVG, FALSE otherwise.
 */
function field_image_link_is_file_svg(\Drupal\file\Entity\File $file) {
  return $file->getMimeType() === 'image/svg+xml';
}
